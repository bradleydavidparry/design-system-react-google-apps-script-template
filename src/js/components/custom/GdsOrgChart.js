import React, { useContext, useState } from "react";
import AppContext from "../../views/AppContext";
// import OrgChart from "@unicef/react-org-chart";
import ClassComponentOrgChart from "./ClassComponentOrgChart";
import { DataList, InsetText, Hint, PhaseBanner } from "../../../govuk";
import { Link } from "react-router-dom";

function recursiveAddChild(object, personId, lmObject, infoObject) {
  return {
    id: personId,
    person: {
      id: personId,
      department: infoObject[personId].Group,
      avatar: infoObject[personId].ImageURL
        ? infoObject[personId].ImageURL
        : "https://i.stack.imgur.com/dr5qp.jpgs",
      name: infoObject[personId].FullName,
      title: infoObject[personId].JobTitle,
      payband: infoObject[personId].Payband,
      totalReports: lmObject[personId] ? lmObject[personId].length : 0,
      hasImage: true,
    },
    hasChild: !!lmObject[personId],
    hasParent: false,
    isHighlight: true,
    hasImage: true,
    children: lmObject[personId]
      ? lmObject[personId].map((childId) =>
          recursiveAddChild(object, childId, lmObject, infoObject)
        )
      : [],
  };
}

function createTree(data, currentOrgChartName) {
  const nameToId = data.reduce((object, person) => {
    object[person.FullName] = person.ID;
    return object;
  }, {});
  const currentOrgChartId = nameToId[currentOrgChartName];
  const infoObject = data.reduce((object, person) => {
    object[person.ID] = person;
    return object;
  }, {});
  const lmObject = data.reduce((object, person) => {
    object[nameToId[person.InternalDataLineManager]] ||= [];
    object[nameToId[person.InternalDataLineManager]].push(person.ID);
    return object;
  }, {});

  const tree = recursiveAddChild({}, currentOrgChartId, lmObject, infoObject);

  return tree;
}

export default function GdsOrgChart(props) {
  const { dataObject } = useContext(AppContext);

  const currentlyEmployedCivilServants = dataObject["CS Schema"].data.filter(
    (person) => person.CurrentlyEmployed === "Yes"
  );

  const [currentOrgChartName, setCurrentOrgChartName] = useState("Tom Read");
  const [tree, setTree] = useState(
    createTree(currentlyEmployedCivilServants, currentOrgChartName)
  );

  function suggest(query, populateResults) {
    const results = currentlyEmployedCivilServants.map(
      (person) => person.FullName
    );
    const loweCaseQuery = query.toLowerCase();
    const filteredResults = results.filter(
      (result) => result.toLowerCase().indexOf(loweCaseQuery) !== -1
    );
    populateResults(filteredResults);
  }

  const dataListHandleChange = (value) => {
    setCurrentOrgChartName(value);
  };

  return (
    <>
      {/*<DataList
        label={{
          children: "Select Person",
        }}
        source={suggest}
        onConfirm={dataListHandleChange}
        displayMenu={"overlay"}
        confirmOnBlur={false}
        value={currentOrgChartName}
        showAllValues={true}
      />*/}

      <PhaseBanner
        tag={{
          children: "under construction",
        }}
      >
        This feature is a work in progress.
      </PhaseBanner>
      <br />
      <p>
        This org chart currently includes employed civil servants only
        (including loan outs) and is generated by the 'Internal Data Line
        Manager' field which business managers can update in the{" "}
        <Link to="/civil-servants/business-manager-view">
          Business Manager View
        </Link>
        .
      </p>
      <InsetText>
        <p>
          This org chart does <strong>not</strong> show the SOP line management
          structure, and updating the 'Internal Data Line Manager' field will{" "}
          <strong>not</strong> update SOP.
        </p>
        <br />
        <p>
          <strong>
            Line managers are responsible for keeping the line management
            structure on SOP accurate, as per Cabinet Office HR policy.
          </strong>
        </p>
      </InsetText>
      <Hint>
        Click on an individual with line reports to expand and collapse them.
        The image and PDF exports might struggle with very large trees.
      </Hint>
      <ClassComponentOrgChart tree={tree} />
    </>
  );
}
